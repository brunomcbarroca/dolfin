#!/usr/bin/env python
#
# Copyright (C) 2016 Garth N. Wells
#
# This file is part of DOLFIN.
#
# DOLFIN is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DOLFIN is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with DOLFIN. If not, see <http://www.gnu.org/licenses/>.
#
# Generate .foo files from .foo.rst files in demos.
# This script should be run from the top level directory.

import sys
import os

def main():
    # Directories to scan
    subdirs = ["demo"]

    # Extensions to handle
    #extensions = [".py.rst", ".cpp.rst", ".h.rst", ".ufl.rst"]
    extensions = [".py.rst"]  # other extensions handled in CMakeLists.txt for each cpp demo

    # Check that we can find pylint.py
    parser = "./utils/pylit/pylit.py"
    if not os.path.isfile(parser):
        print("Cannot find pylit.py. Are you running from the top level directory")
        return 1

    # Get absolute path to parser
    parser = os.path.abspath(parser)

    # Generate .py files from all .py.rst files and ditto for .h, .cpp, .ufl
    topdir = os.getcwd()
    for subdir in subdirs:
        for root, dirs, files in os.walk(subdir):

            # Check for .foo.rst files
            files = [f for f in files if f.endswith(".rst")]
            rstfiles = []
            for ext in extensions:
                rstfiles.extend(f for f in files if f.endswith(ext))
            if not rstfiles:
                continue

            # Compile files
            os.chdir(root)
            print("Converting rst files in in {} ...".format(root))
            for f in rstfiles:
                command = parser + " " + os.path.abspath(f)
                #print("  " + command)
                ret = os.system(command)
                if ret != 0:
                    print("Unable to convert rst file to a source file ({})".format(f))
                    return 1
            os.chdir(topdir)
    return 0


if __name__ == "__main__":
    sys.exit(main())
